{"version":3,"sources":["pages/Login/Login.jsx","pages/Signup/Signup.jsx","components/Header.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["Login","Signup","Header","to","path","render","props","exact","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAUeA,MARf,WACI,OACI,oCACD,wCCKQC,MARf,WACI,OACI,oCACA,wC,cCiBOC,MAhBf,WACI,OACI,oCACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,SADA,sBAEA,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEA,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAQ,SAACC,GAAD,OACzB,kBAAC,EAAD,CAAOC,OAAK,EAACH,KAAK,cAEtB,kBAAC,IAAD,CAAOA,KAAK,UAAUC,OAAQ,SAACC,GAAD,OAC1B,kBAAC,EAAD,CAAQC,OAAK,EAACH,KAAK,iBCKhBI,G,6KAbX,OACE,yBAAKC,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,a,GAPQC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACA,kBAAC,IAAD,KAAQ,kBAAC,EAAD,QAERC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c25d5232.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Login(){\n    return(\n        <>\n       <h1> Login</h1>\n        </>\n    )\n}\n\nexport default Login","import React from 'react';\n\nfunction Signup(){\n    return(\n        <>\n        <h1>Signup</h1>\n        </>\n    )\n}\n\nexport default Signup","import React from 'react';\nimport Login from \"../pages/Login/Login\"\nimport Signup from '../pages/Signup/Signup'\nimport {Link, Route} from 'react-router-dom'\n\n\nfunction Header(){\n    return(\n        <>\n        <Link to=\"/login\">Login</Link>&nbsp;&nbsp; | &nbsp;&nbsp;\n        <Link to=\"/signup\">Sign Up</Link>\n\n        <Route path=\"/login\" render={(props) =>\n            <Login exact path=\"/login\"/>\n        }/>\n        <Route path=\"/signup\" render={(props) =>\n            <Signup exact path=\"/signup\"/>\n        }/>\n        </>\n    )\n}\n\nexport default Header;","import React,{ Component }  from 'react';\nimport Header from '../../components/Header'\nimport {Route, Switch} from \"react-router-dom\"\nimport './App.css';\n\nclass App extends Component{\n  \n  render(){\n    return (\n      <div className=\"App\">\n      <Switch>\n        <Route>\n          <Header />\n        </Route>\n      </Switch>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/pages/App/App'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <Router><App /></Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}